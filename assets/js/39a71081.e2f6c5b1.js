"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6182],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function s(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var c=n.createContext({}),l=function(t){var e=n.useContext(c),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},p=function(t){var e=l(t.components);return n.createElement(c.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),u=l(a),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(f,o(o({ref:e},p),{},{components:a})):n.createElement(f,o({ref:e},p))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9521:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2,title:"Organizing your data"},o=void 0,s={unversionedId:"getting-started/basic/data-formatting",id:"getting-started/basic/data-formatting",title:"Organizing your data",description:"Data Formatting",source:"@site/docs/getting-started/basic/data-formatting.md",sourceDirName:"getting-started/basic",slug:"/getting-started/basic/data-formatting",permalink:"/classy/docs/getting-started/basic/data-formatting",draft:!1,editUrl:"https://github.com/sunglasses-ai/classy/edit/main/docs/docs/getting-started/basic/data-formatting.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Organizing your data"},sidebar:"tutorialSidebar",previous:{title:"First steps",permalink:"/classy/docs/getting-started/basic/intro"},next:{title:"Choosing a profile",permalink:"/classy/docs/getting-started/basic/choosing-profile"}},c={},l=[{value:"Data Formatting",id:"data-formatting",level:2},{value:"Organizing Datasets",id:"organizing-datasets",level:2}],p={toc:l};function d(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"data-formatting"},"Data Formatting"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"classy")," requires data to be formatted in a specific way according to the task you're tackling (check out ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference-manual/tasks-and-formats"},"Tasks and Input Formats")," in the documentation)."),(0,r.kt)("p",null,"In our case of ",(0,r.kt)("strong",{parentName:"p"},"Named Entity Recognition")," (i.e., ",(0,r.kt)("em",{parentName:"p"},"Token Classification"),"), we need the data to be formatted such that each line represents a single sample.\nFor instance, taking again our running example of ",(0,r.kt)("em",{parentName:"p"},"Barack Obama visited Google in California"),", we can format it as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Barack Obama visited Google in California\\tPER PER O ORG O LOC\n")),(0,r.kt)("p",null,"That is, a TSV (tab-separated values) file which has a space-separated sequence of tokens as the first column, and\na space-separated sequence of labels as the second column (both sequences ",(0,r.kt)("strong",{parentName:"p"},"must have")," the same number of elements)."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"classy")," by default supports ",(0,r.kt)("inlineCode",{parentName:"p"},".tsv")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".jsonl")," as input formats (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference-manual/tasks-and-formats"},"the documentation"),"),\nbut you can ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/customizing-things/custom-data-format/"},"add custom formats")," as well.")),(0,r.kt)("p",null,"If your dataset is already formatted like this, great! Otherwise, this is the only bit where coding is required.\nYou can either convert it yourself (via a python or bash script, whatever you're comfortable with), or you can register\na ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/customizing-things/custom-data-format/"},"custom data reader")," to support your dataset format."),(0,r.kt)("h2",{id:"organizing-datasets"},"Organizing Datasets"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"classy"),", as in standard machine learning projects, the most simple way to organize your datasets is to create\na directory containing the train, validation and test datasets."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"data/ner-data\n\u251c\u2500\u2500 train.tsv\n\u251c\u2500\u2500 validation.tsv\n\u2514\u2500\u2500 test.tsv\n")),(0,r.kt)("p",null,"In this way, ",(0,r.kt)("inlineCode",{parentName:"p"},"classy")," will automatically infer the splits of your dataset from the directory structure."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you have multiple training files, or you want to specify the splits using a different directory structure, you can\nuse a ",(0,r.kt)("em",{parentName:"p"},"training coordinates")," file. You can find a complete guide on how to do it in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference-manual/cli/train/"},"Reference Manual"),".")))}d.isMDXComponent=!0}}]);