"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1,title:"Overall Structure"},o=void 0,l={unversionedId:"reference-manual/structured-configs/overall-structure",id:"reference-manual/structured-configs/overall-structure",title:"Overall Structure",description:"In classy, we specify every detail of training and model configurations through nice .yaml files,",source:"@site/docs/reference-manual/structured-configs/overall-structure.md",sourceDirName:"reference-manual/structured-configs",slug:"/reference-manual/structured-configs/overall-structure",permalink:"/classy/docs/reference-manual/structured-configs/overall-structure",draft:!1,editUrl:"https://github.com/sunglasses-ai/classy/edit/main/docs/docs/reference-manual/structured-configs/overall-structure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overall Structure"},sidebar:"tutorialSidebar",previous:{title:"import/export",permalink:"/classy/docs/reference-manual/cli/export"},next:{title:"Changing Config",permalink:"/classy/docs/reference-manual/structured-configs/changing-config"}},s={},c=[{value:"A Minimal Example",id:"a-minimal-example",level:2},{value:"Full Structure",id:"full-structure",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"classy"),", we specify every detail of training and model configurations through nice ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml")," files,\nusing the amazing ",(0,r.kt)("a",{parentName:"p",href:"https://hydra.cc/"},"Hydra")," library."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"While you can read this section and work with classy config structure, without knowing Hydra, we recommend\ngoing through its ",(0,r.kt)("a",{parentName:"p",href:"https://hydra.cc/docs/tutorials/intro"},"tutorial")," before proceeding.")),(0,r.kt)("p",null,"This allows you to change and swap parts easily. For instance, imagine you have been fine-tuning BERT on some Token\nClassification task, with this configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"<...>\ntransformer_model: bert-large-cased\nuse_last_n_layers: 1\nfine_tune: True\noptim_conf:\n  <...>\n")),(0,r.kt)("p",null,"If you wanted to give a try keeping BERT weights frozen, you can just go with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"_target_: 'classy.pl_modules.hf.HFTokensPLModule'\ntransformer_model: bert-large-cased\nuse_last_n_layers: 1\nfine_tune: False\noptim_conf:\n  <...>\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"These ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml")," files also help you to ",(0,r.kt)("strong",{parentName:"p"},"track")," what changes you made on some experiment as the configuration is saved alongside\nthe model in the experiment folder.")),(0,r.kt)("h2",{id:"a-minimal-example"},"A Minimal Example"),(0,r.kt)("p",null,"However, if you were to specify every aspect of your experiment in a single ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml")," file, it would eventually become gigantic\nand pretty much useless. To avoid this, we use Hydra ",(0,r.kt)("em",{parentName:"p"},"config groups"),", which is just a fancy name to say that the\nexperiment details are grouped by functionality and stored inside dedicated folders. That is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tree -L 1 configurations/\nconfigurations/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 token.yaml\n\u251c\u2500\u2500 model\n\u2502   \u2514\u2500\u2500 token.yaml\n\u251c\u2500\u2500 training\n\u2502   \u2514\u2500\u2500 token.yaml\n\u2514\u2500\u2500 root.yaml\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"data/token.yaml")," defines data-related configurations for your ",(0,r.kt)("strong",{parentName:"p"},"Token Classification")," experiment, while ",(0,r.kt)("inlineCode",{parentName:"p"},"model/token.yaml")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"training/token.yaml")," specify model (e.g. architecture) and training (e.g. gradient accumulation) aspects."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root.yaml")," is the yaml ",(0,r.kt)("em",{parentName:"p"},"orchestrator"),", that is, it defines global variables and specify which yaml file in each folder\nshould be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=root.yaml",title:"root.yaml"},"# global variables\ntask: token\nproject_name: classy\n<...>\n\n# here specify yaml file to use for each config group\n# syntax: the name of the file (without .yaml extension) contained in the corresponding folder\ndefaults:\n  - data: token\n  - model: token\n  - logging: default\n  - _self_  # this is some hydra-specific machinery (you can ignore it, but leave it at the end of the defaults list)\n")),(0,r.kt)("h2",{id:"full-structure"},"Full Structure"),(0,r.kt)("p",null,"As a matter of fact, there are quite a few details more ",(0,r.kt)("inlineCode",{parentName:"p"},"data/"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"model/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"train/")," that you would want to specify.\nThus, the actual structure of the config groups is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tree -L 1 configurations/\nconfigurations/\n\u251c\u2500\u2500 callbacks/          # used to define callbacks that are executed during training (at precise steps, like every end of validation)\n\u251c\u2500\u2500 data/               # data-related configuration (e.g. PyTorch Dataset)\n\u251c\u2500\u2500 model/              # model-related configuration (e.g. architecture)\n\u251c\u2500\u2500 prediction/         # data-configuration to be used at prediction time\n\u2514\u2500\u2500 training/           # training configuration\n")),(0,r.kt)("p",null,"Besides, there are 5 root ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml")," files already defined, one for each task:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"qa.yaml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sentence-pair.yaml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sequence.yaml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token.yaml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"generation.yaml"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you manually inspect the ",(0,r.kt)("inlineCode",{parentName:"p"},"configurations/")," folder, you'll see there are 3 additional folders: ",(0,r.kt)("inlineCode",{parentName:"p"},"logging/")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"profiles/"),". You can safely ignore the first two, and we cover ",(0,r.kt)("inlineCode",{parentName:"p"},"profiles/")," in depth ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/customizing-things/changing-profile"},"here"),".")))}p.isMDXComponent=!0}}]);