"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6047],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return n?a.createElement(f,r(r({ref:t},u),{},{components:n})):a.createElement(f,r({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const s={sidebar_position:4,title:"Custom Model"},r=void 0,i={unversionedId:"getting-started/customizing-things/custom-model",id:"getting-started/customizing-things/custom-model",title:"Custom Model",description:"classy is built on top of PyTorch Lightning and, in order to better understand classy code infrastructure, we recommend",source:"@site/docs/getting-started/customizing-things/custom-model.md",sourceDirName:"getting-started/customizing-things",slug:"/getting-started/customizing-things/custom-model",permalink:"/classy/docs/getting-started/customizing-things/custom-model",draft:!1,editUrl:"https://github.com/sunglasses-ai/classy/edit/main/docs/docs/getting-started/customizing-things/custom-model.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Custom Model"},sidebar:"tutorialSidebar",previous:{title:"Custom Data Format",permalink:"/classy/docs/getting-started/customizing-things/custom-data-format"},next:{title:"Custom Dataset",permalink:"/classy/docs/getting-started/customizing-things/custom-dataset"}},l={},c=[{value:"A Minimal Example",id:"a-minimal-example",level:2}],u={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"classy")," is built on top of PyTorch Lightning and, in order to better understand classy code infrastructure, we recommend\ngoing through PyTorch Lightning ",(0,o.kt)("a",{parentName:"p",href:"https://pytorch-lightning.readthedocs.io/en/latest/starter/new-project.html"},"intro guide"),"\nbefore proceeding.")),(0,o.kt)("p",null,"Implementing your own model within ",(0,o.kt)("inlineCode",{parentName:"p"},"classy")," is easy. You just need to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"subclass ",(0,o.kt)("inlineCode",{parentName:"li"},"ClassyPLModule")," and your task mixin (",(0,o.kt)("em",{parentName:"li"},"SequenceTask"),", ",(0,o.kt)("em",{parentName:"li"},"SentencePairTask"),", ",(0,o.kt)("em",{parentName:"li"},"TokensTask"),", ",(0,o.kt)("em",{parentName:"li"},"QATask"),")"),(0,o.kt)("li",{parentName:"ul"},"implement abstract methods"),(0,o.kt)("li",{parentName:"ul"},"(optional) override any other method")),(0,o.kt)("p",null,"For instance, considering Sequence Classification, you would need to implement the following class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# subclass your task and ClassyPLModule\nclass MyCustomClassyPLModule(SequenceTask, ClassyPLModule):\n    def __init__(\n        self,\n        param1: Any,\n        param2: Any,\n        vocabulary: Vocabulary,\n        optim_conf: omegaconf.DictConfig,\n    ):\n        super().__init__(vocabulary=vocabulary, optim_conf=optim_conf)\n        raise NotImplementedError\n\n    def forward(self, *args, **kwargs):\n        # standard pytorch forward\n        raise NotImplementedError\n\n    def batch_predict(self, *args, **kwargs) -> Iterator[Tuple[SequenceSample, str]]:\n        # wrapper for your forward method\n        # it takes as input the batches produced by your dataset\n        # it emits tuples (sequence sample, predicted label)\n        # decoding logic, such as converting labels from tensors to strings, goes here\n        raise NotImplementedError\n\n    ###################\n    # lightning hooks #\n    ###################\n\n    def training_step(self, batch: dict, batch_idx: int) -> torch.Tensor:\n        raise NotImplementedError\n\n    def validation_step(self, batch: dict, batch_idx: int) -> None:\n        raise NotImplementedError\n\n    def test_step(self, batch: dict, batch_idx: int) -> None:\n        raise NotImplementedError\n")),(0,o.kt)("h2",{id:"a-minimal-example"},"A Minimal Example"),(0,o.kt)("p",null,"Practically, imagine you want to build a Sequence Classification model on top of a HuggingFace Transformer model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="classy/pl_modules/custom_model.py"',title:'"classy/pl_modules/custom_model.py"'},"class MyCustomClassyPLModule(SequenceTask, ClassyPLModule):\n    pass\n")),(0,o.kt)("p",null,"You first implement its constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(\n    self,\n    transformer_model: str,\n    vocabulary: Vocabulary,\n    optim_conf: omegaconf.DictConfig,\n):\n    super().__init__(vocabulary=vocabulary, optim_conf=optim_conf)\n    self.save_hyperparameters(ignore="vocabulary")\n    num_classes = vocabulary.get_size(k="labels")  # number of target classes\n    self.classifier = AutoModelForSequenceClassification.from_pretrained(\n        transformer_model, num_labels=num_classes\n    )  # underlying classifier\n    self.accuracy_metric = (\n        torchmetrics.Accuracy()\n    )  # metric to track your model performance\n')),(0,o.kt)("p",null,"Then, you need to implement the PyTorch forward:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def forward(\n    self,\n    input_ids: torch.Tensor,\n    attention_mask: torch.Tensor,\n    samples: List[SequenceSample],\n    token_type_ids: Optional[torch.Tensor] = None,\n    labels: Optional[torch.Tensor] = None,\n) -> ClassificationOutput:\n    model_input = {"input_ids": input_ids, "attention_mask": attention_mask}\n    if token_type_ids is not None:\n        model_input["token_type_ids"] = token_type_ids\n    if labels is not None:\n        model_input["labels"] = labels\n    model_output = self.classifier(**model_input)\n    return ClassificationOutput(\n        logits=model_output.logits,\n        probabilities=torch.softmax(model_output.logits, dim=-1),\n        predictions=torch.argmax(model_output.logits, dim=-1),\n        loss=model_output.loss,\n    )\n')),(0,o.kt)("p",null,"There's nothing really special about this forward. ",(0,o.kt)("inlineCode",{parentName:"p"},"ClassificationOutput")," is just a dataclass to conveniently store logits,\nprobabilities, predictions and loss. The only important thing is the signature: it ",(0,o.kt)("strong",{parentName:"p"},"must match")," with the batches your\ndataset emits (here, we are using ",(0,o.kt)("em",{parentName:"p"},"classy.data.dataset.hf.HFSequenceDataset"),")."),(0,o.kt)("p",null,"Then, there's the batch predict method, which wraps your forward method to emit classified ",(0,o.kt)("em",{parentName:"p"},"SequenceSample"),"-s:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def batch_predict(\n    self, *args, **kwargs\n) -> Iterator[Tuple[Union[SequenceSample, SentencePairSample], str]]:\n    samples = kwargs.get("samples")\n    classification_output = self.forward(*args, **kwargs)\n    for sample, prediction in zip(samples, classification_output.predictions):\n        yield sample, self.vocabulary.get_elem(k="labels", idx=prediction.item())\n')),(0,o.kt)("p",null,"You just invoke the forward method, and use the vocabulary to perform label tensor-to-string decoding."),(0,o.kt)("p",null,"Finally, you have to implement lightning hooks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def training_step(self, batch: dict, batch_idx: int) -> torch.Tensor:\n    classification_output = self.forward(**batch)\n    self.log("loss", classification_output.loss)\n    return classification_output.loss\n\n\ndef validation_step(self, batch: dict, batch_idx: int) -> None:\n    classification_output = self.forward(**batch)\n    self.accuracy_metric(classification_output.predictions, batch["labels"].squeeze(-1))\n    self.log("val_loss", classification_output.loss)\n    self.log("val_accuracy", self.accuracy_metric, prog_bar=True)\n\n\ndef test_step(self, batch: dict, batch_idx: int) -> None:\n    classification_output = self.forward(**batch)\n    self.accuracy_metric(classification_output.predictions, batch["labels"].squeeze(-1))\n    self.log("test_accuracy", self.accuracy_metric)\n')),(0,o.kt)("p",null,"The only missing component is writing the configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="model/sequence-custom.yaml"',title:'"model/sequence-custom.yaml"'},"_target_: 'classy.pl_modules.custom_model.MyCustomClassyPLModule'\ntransformer_model: ${transformer_model}\noptim_conf:\n  _target_: classy.optim.factories.TorchFactory\n  optimizer:\n    _target_: torch.optim.Adam\n    lr: 1e-5\n")),(0,o.kt)("p",null,"and start the training:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"classy train sequence <dataset-path> -c model=sequence-custom\n")))}m.isMDXComponent=!0}}]);