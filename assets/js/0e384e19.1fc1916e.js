/*! For license information please see 0e384e19.1fc1916e.js.LICENSE.txt */
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9671],{3905:(t,e,a)=>{a.d(e,{Zo:()=>h,kt:()=>u});var n=a(7294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,n,i=function(t,e){if(null==t)return{};var a,n,i={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var o=n.createContext({}),p=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},h=function(t){var e=p(t.components);return n.createElement(o.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,i=t.mdxType,r=t.originalType,o=t.parentName,h=l(t,["components","mdxType","originalType","parentName"]),d=p(a),u=i,m=d["".concat(o,".").concat(u)]||d[u]||c[u]||r;return a?n.createElement(m,s(s({ref:e},h),{},{components:a})):n.createElement(m,s({ref:e},h))}));function u(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=a.length,s=new Array(r);s[0]=d;var l={};for(var o in e)hasOwnProperty.call(e,o)&&(l[o]=e[o]);l.originalType=t,l.mdxType="string"==typeof t?t:i,s[1]=l;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},856:(t,e,a)=>{a.d(e,{Z:()=>r});var n=a(7294);class i{constructor(t,e){void 0===t&&(t="#termynal"),void 0===e&&(e={}),this.container="string"==typeof t?document.querySelector(t):t,this.pfx=`data-${e.prefix||"ty"}`,this.originalStartDelay=this.startDelay=e.startDelay||parseFloat(this.container.getAttribute(`${this.pfx}-startDelay`))||600,this.originalTypeDelay=this.typeDelay=e.typeDelay||parseFloat(this.container.getAttribute(`${this.pfx}-typeDelay`))||90,this.originalLineDelay=this.lineDelay=e.lineDelay||parseFloat(this.container.getAttribute(`${this.pfx}-lineDelay`))||1500,this.progressLength=e.progressLength||parseFloat(this.container.getAttribute(`${this.pfx}-progressLength`))||40,this.progressChar=e.progressChar||this.container.getAttribute(`${this.pfx}-progressChar`)||"\u2588",this.progressPercent=e.progressPercent||parseFloat(this.container.getAttribute(`${this.pfx}-progressPercent`))||100,this.cursor=e.cursor||this.container.getAttribute(`${this.pfx}-cursor`)||"\u258b",this.lineData=this.lineDataToElements(e.lineData||[]),this.loadLines(),e.noInit||this.init()}loadLines(){const t=this.generateFinish();t.style.visibility="hidden",this.container.appendChild(t),this.lines=Array.from(this.container.querySelectorAll(`[${this.pfx}]`)).concat(this.lineData);for(let a=0;a<this.lines.length;a++)this.lines[a].style.visibility="hidden",this.container.appendChild(this.lines[a]);const e=this.generateRestart();e.style.visibility="hidden",this.container.appendChild(e),this.container.setAttribute("data-termynal","")}init(){const t=getComputedStyle(this.container);this.container.style.width="0px"!==t.width?t.width:void 0,this.container.style.minHeight="0px"!==t.height?t.height:void 0,this.container.setAttribute("data-termynal",""),this.container.innerHTML="";for(let e of this.lines)e.style.visibility="visible";this.start()}async start(){this.addFinish(),await this._wait(this.startDelay);for(let t of this.lines){const e=t.getAttribute(this.pfx),a=t.getAttribute(`${this.pfx}-delay`)||this.lineDelay;"input"===e?(t.setAttribute(`${this.pfx}-cursor`,this.cursor),await this.type(t),await this._wait(a)):"progress"===e?(await this.progress(t),await this._wait(a)):(this.container.appendChild(t),await this._wait(a)),t.removeAttribute(`${this.pfx}-cursor`)}this.addRestart(),this.finishElement.style.visibility="hidden",this.lineDelay=this.originalLineDelay,this.typeDelay=this.originalTypeDelay,this.startDelay=this.originalStartDelay}generateRestart(){const t=document.createElement("a");return t.onclick=t=>{t.preventDefault(),this.container.innerHTML="",this.init()},t.href="#",t.setAttribute("data-terminal-control",""),t.innerHTML="restart \u21bb",t}generateFinish(){const t=document.createElement("a");return t.onclick=t=>{t.preventDefault(),this.lineDelay=0,this.typeDelay=0,this.startDelay=0},t.href="#",t.setAttribute("data-terminal-control",""),t.innerHTML="fast \u2192",this.finishElement=t,t}addRestart(){const t=this.generateRestart();this.container.appendChild(t)}addFinish(){const t=this.generateFinish();this.container.appendChild(t)}async type(t){const e=Array.from(t.textContent);t.textContent="",this.container.appendChild(t);for(let a of e){const e=t.getAttribute(`${this.pfx}-typeDelay`)||this.typeDelay;await this._wait(e),t.textContent+=a}}async progress(t){const e=t.getAttribute(`${this.pfx}-progressLength`)||this.progressLength,a=(t.getAttribute(`${this.pfx}-progressChar`)||this.progressChar).repeat(e),n=t.getAttribute(`${this.pfx}-progressPercent`)||this.progressPercent;t.textContent="",this.container.appendChild(t);for(let i=1;i<a.length+1;i++){await this._wait(this.typeDelay);const e=Math.round(i/a.length*100);if(t.textContent=`${a.slice(0,i)} ${e}%`,e>n)break}}_wait(t){return new Promise((e=>setTimeout(e,t)))}lineDataToElements(t){return t.map((t=>{let e=document.createElement("div");return e.innerHTML=`<span ${this._attributes(t)}>${t.value||""}</span>`,e.firstElementChild}))}_attributes(t){let e="";for(let a in t)"class"!==a?"type"===a?e+=`${this.pfx}="${t[a]}" `:"value"!==a&&(e+=`${this.pfx}-${a}="${t[a]}" `):e+=` class=${t[a]} `;return e}}class r extends n.Component{componentDidMount(){new i(this.t,{typeDelay:40,lineDelay:700})}render(){return n.createElement("div",null,n.createElement("div",{"data-terminal":!0,style:this.props.style,ref:t=>this.t=t},this.props.children))}}},9881:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var n=a(7462),i=(a(7294),a(3905)),r=a(856);const s={title:"Introduction",sidebar_position:1,sidebar_label:"Introduction"},l=void 0,o={unversionedId:"intro",id:"intro",title:"Introduction",description:"classy is a simple-to-use library for building high-performance Machine Learning models in NLP.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/classy/docs/intro",draft:!1,editUrl:"https://github.com/sunglasses-ai/classy/edit/main/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",sidebar_position:1,sidebar_label:"Introduction"},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/classy/docs/installation"}},p={},h=[{value:"Installation",id:"installation",level:2},{value:"Example Walkthrough",id:"example-walkthrough",level:2},{value:"Data Organization",id:"data-organization",level:3},{value:"Training",id:"training",level:3},{value:"Using your trained model",id:"using-your-trained-model",level:3}],c={toc:h};function d(t){let{components:e,...a}=t;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"classy")," is a simple-to-use library for building high-performance Machine Learning models in NLP.\nIt wraps the best libraries around (",(0,i.kt)("a",{parentName:"p",href:"https://pytorch.org/"},"PyTorch"),", ",(0,i.kt)("a",{parentName:"p",href:"https://www.pytorchlightning.ai/"},"PyTorch Lightning"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://huggingface.co/transformers/"},"Transformers"),", ",(0,i.kt)("a",{parentName:"p",href:"https://hydra.cc"},"Hydra"),", ",(0,i.kt)("a",{parentName:"p",href:"https://streamlit.io/"},"Streamlit"),", ...)\nand offers them to users with a simple CLI interface."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)(r.Z,{mdxType:"ReactTermynal"},(0,i.kt)("span",{"data-ty":"input"},"pip install classy-core"),(0,i.kt)("span",{"data-ty":"progress"}),(0,i.kt)("span",{"data-ty":!0},"Successfully installed classy-core")),(0,i.kt)("h2",{id:"example-walkthrough"},"Example Walkthrough"),(0,i.kt)("p",null,"You have the following data at disposal:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"User"),(0,i.kt)("th",{parentName:"tr",align:null},"Product-ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Review"),(0,i.kt)("th",{parentName:"tr",align:null},"Overall Judgement"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"U1"),(0,i.kt)("td",{parentName:"tr",align:null},"P1"),(0,i.kt)("td",{parentName:"tr",align:null},"I really like this headphones"),(0,i.kt)("td",{parentName:"tr",align:null},"positive")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"U2"),(0,i.kt)("td",{parentName:"tr",align:null},"P1"),(0,i.kt)("td",{parentName:"tr",align:null},"Sound is terrible! I am returning these headphones right away."),(0,i.kt)("td",{parentName:"tr",align:null},"negative")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"..."),(0,i.kt)("td",{parentName:"tr",align:null},"..."),(0,i.kt)("td",{parentName:"tr",align:null},"..."),(0,i.kt)("td",{parentName:"tr",align:null},"...")))),(0,i.kt)("p",null,"That is, a list of reviews made by users for a given product, along with their overall judgement. Now, say you want to train\na classification model on this data so that, given a new review as input, it would yield whether its overall judgement is\npositive or negative."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This is a ",(0,i.kt)("strong",{parentName:"p"},"Sequence Classification")," problem, specifically ",(0,i.kt)("em",{parentName:"p"},"Sentiment Classification"),".")),(0,i.kt)("p",null,"In a nutshell, this is how you would do it with ",(0,i.kt)("inlineCode",{parentName:"p"},"classy"),":"),(0,i.kt)("h3",{id:"data-organization"},"Data Organization"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"classy")," is able to work with ",(0,i.kt)("inlineCode",{parentName:"p"},".tsv")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".jsonl")," files. In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},".tsv")," for ",(0,i.kt)("strong",{parentName:"p"},"Sequence Classification"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"classy")," needs the file to have only two columns, one with the sequence and the other with the label."),(0,i.kt)("p",null,"Say your review data is already stored in a ",(0,i.kt)("inlineCode",{parentName:"p"},".tsv")," file (with four columns, as we saw above), all you need to do is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ cut -f3,4 data/raw.tsv > data/classy-sentiment.tsv\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"classy")," supports many ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference-manual/tasks-and-formats"},"tasks and input formats"),", and is independent of how you\nconvert your data to a ",(0,i.kt)("inlineCode",{parentName:"p"},"classy"),"-compatible format (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"sed"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"awk"),", and a ",(0,i.kt)("inlineCode",{parentName:"p"},"python")," script are all viable options).")),(0,i.kt)("h3",{id:"training"},"Training"),(0,i.kt)("p",null,"Now that our data is ",(0,i.kt)("inlineCode",{parentName:"p"},"classy"),"-compatible, we can train our model! Let us call it ",(0,i.kt)("inlineCode",{parentName:"p"},"sequence-example"),":"),(0,i.kt)(r.Z,{mdxType:"ReactTermynal"},(0,i.kt)("span",{"data-ty":"input"},"classy train sequence data/classy-sentiment.tsv -n sequence-example"),(0,i.kt)("span",{"data-ty":"progress"}),(0,i.kt)("span",{"data-ty":!0},"Training completed")),(0,i.kt)("p",null),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"sequence")," in the above command tells classy to train a ",(0,i.kt)("strong",{parentName:"p"},"Sequence Classification")," model. This is the only thing, beside\norganizing data, that classy expects you to do. We'll go back to this later on.")),(0,i.kt)("h3",{id:"using-your-trained-model"},"Using your trained model"),(0,i.kt)("p",null,"Now that we have trained our model, ",(0,i.kt)("inlineCode",{parentName:"p"},"classy")," offers a number of commands that let you use it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference-manual/cli/inference/#demo"},(0,i.kt)("inlineCode",{parentName:"a"},"classy demo"))," spawns a ",(0,i.kt)("a",{parentName:"li",href:"https://streamlit.io/"},"Streamlit"),"-based interface that lets you query your model visually;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference-manual/cli/predict"},(0,i.kt)("inlineCode",{parentName:"a"},"classy predict"))," lets you choose whether to use your model for file prediction or in bash-interactive mode (similarly to ",(0,i.kt)("inlineCode",{parentName:"li"},"demo"),", but in the terminal);"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference-manual/cli/inference/#serve"},(0,i.kt)("inlineCode",{parentName:"a"},"classy serve"))," spawns a REST API (through ",(0,i.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/"},"FastAPI"),") that you can query using any REST-compatible client (",(0,i.kt)("inlineCode",{parentName:"li"},"requests"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"curl"),", you name it);"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference-manual/cli/inference/#evaluate"},(0,i.kt)("inlineCode",{parentName:"a"},"classy evaluate"))," runs your model on a given test set and reports metrics on the task.")))}d.isMDXComponent=!0}}]);