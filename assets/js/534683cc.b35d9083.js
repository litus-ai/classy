"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5774],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return n?a.createElement(f,s(s({ref:t},m),{},{components:n})):a.createElement(f,s({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3,title:"Custom Data Format"},s=void 0,i={unversionedId:"getting-started/customizing-things/custom-data-format",id:"getting-started/customizing-things/custom-data-format",title:"Custom Data Format",description:"By default, classy only supports .tsv and .jsonl files. However, you can easily add support for your own file format on some task.",source:"@site/docs/getting-started/customizing-things/custom-data-format.md",sourceDirName:"getting-started/customizing-things",slug:"/getting-started/customizing-things/custom-data-format",permalink:"/classy/docs/getting-started/customizing-things/custom-data-format",draft:!1,editUrl:"https://github.com/sunglasses-ai/classy/edit/main/docs/docs/getting-started/customizing-things/custom-data-format.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Custom Data Format"},sidebar:"tutorialSidebar",previous:{title:"Changing Profile",permalink:"/classy/docs/getting-started/customizing-things/changing-profile"},next:{title:"Custom Model",permalink:"/classy/docs/getting-started/customizing-things/custom-model"}},l={},p=[{value:"A Minimal Example",id:"a-minimal-example",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By default, classy only supports .tsv and .jsonl files. However, you can easily add support for your own file format on some task.\nYou just need to implement your own data driver and register it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# implement your data driver\n@DataDriver.register(YOUR_TASK, YOUR_FILE_EXTENSION)\nclass CustomDataDriver(DataDriver):\n    def read(self, lines: Iterator[str]) -> Iterator[ClassySample]:\n        raise NotImplementedError\n\n    def save(\n        self,\n        samples: Iterator[ClassySample],\n        path: str,\n        use_predicted_annotation: bool = False,\n    ):\n        raise NotImplementedError\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"classy")," uses the tuple (task, file-extension) to determine the data driver to instantiate for some file. This means that\npostpending file extensions is mandatory, even on Unix systems.")),(0,r.kt)("h2",{id:"a-minimal-example"},"A Minimal Example"),(0,r.kt)("p",null,"For instance, imagine you were to reimplement the ",(0,r.kt)("inlineCode",{parentName:"p"},".jsonl")," data driver for Sequence Classification:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@DataDriver.register(SEQUENCE, "jsonl")\nclass JSONLSequenceDataDriver(SequenceDataDriver):\n    pass\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"SequenceDataDriver is just a subclass of DataDriver where the sample types have been downcasted to SequenceSample only.")),(0,r.kt)("p",null,"You would first implement the read method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def read(self, lines: Iterator[str]) -> Iterator[SequenceSample]:\n    # iterate on lines\n    for line in lines:\n        # read json object and instantiate sequence sample\n        yield SequenceSample(**json.loads(line))\n")),(0,r.kt)("p",null,"and, then, the save method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def save(self, samples: Iterator[SequenceSample], path: str):\n    with open(path, "w") as f:\n        # iterate on samples\n        for sample in samples:\n            # dump json object\n            f.write(\n                json.dumps(\n                    {"sequence": sample.sequence, "label": sample.reference_annotation}\n                )\n                + "\\n"\n            )\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"While both ",(0,r.kt)("inlineCode",{parentName:"p"},".jsonl")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".tsv")," are one-sample-per-line formats, your own data driver does not need to follow this behavior. As you\nhave access to the lines iterator, you can read your file as you see fit.")))}c.isMDXComponent=!0}}]);