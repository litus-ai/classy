"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1067],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return a?n.createElement(g,o(o({ref:t},m),{},{components:a})):n.createElement(g,o({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4828:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:6,title:"Custom Optimizer"},o="Optimizers",s={unversionedId:"getting-started/customizing-things/custom-optimizer",id:"getting-started/customizing-things/custom-optimizer",title:"Custom Optimizer",description:"Classy comes with a set of well established predefined Optimizers that you can easily plug in your experiments. At the moment we support:",source:"@site/docs/getting-started/customizing-things/custom-optimizer.md",sourceDirName:"getting-started/customizing-things",slug:"/getting-started/customizing-things/custom-optimizer",permalink:"/classy/docs/getting-started/customizing-things/custom-optimizer",draft:!1,editUrl:"https://github.com/sunglasses-ai/classy/edit/main/docs/docs/getting-started/customizing-things/custom-optimizer.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Custom Optimizer"},sidebar:"tutorialSidebar",previous:{title:"Custom Dataset",permalink:"/classy/docs/getting-started/customizing-things/custom-dataset"},next:{title:"Custom Evaluation Metric",permalink:"/classy/docs/getting-started/customizing-things/custom-metric"}},l={},p=[{value:"Adam",id:"adam",level:3},{value:"AdamW",id:"adamw",level:3},{value:"Adafactor",id:"adafactor",level:3},{value:"RAdam",id:"radam",level:3},{value:"Custom Optimizers",id:"custom-optimizers",level:2}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"optimizers"},"Optimizers"),(0,r.kt)("p",null,"Classy comes with a set of well established predefined Optimizers that you can easily plug in your experiments. At the moment we support:"),(0,r.kt)("h3",{id:"adam"},"Adam"),(0,r.kt)("p",null,"One of the most famous Optimizer for Natural Language Processing applications, ",(0,r.kt)("strong",{parentName:"p"},"virtually ubiquitous"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udd28 ",(0,r.kt)("a",{parentName:"li",href:"https://pytorch.org/docs/stable/generated/torch.optim.Adam.html"},"Implementation")),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udcc4 ",(0,r.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1412.6980"},"Paper"))),(0,r.kt)("p",null,"To use it, put the following yaml lines in your own profile or config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  optim_conf:\n    _target_: classy.optim.factories.AdamWithWarmupFactory\n    lr: 3e-5\n    warmup_steps: 5000\n    total_steps: ${training.pl_trainer.max_steps}\n    weight_decay: 0.01\n    no_decay_params:\n      - bias\n      - LayerNorm.weight\n")),(0,r.kt)("h3",{id:"adamw"},"AdamW"),(0,r.kt)("p",null,"Adam implementation with weight decay fix as stated in the original paper."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udd28 ",(0,r.kt)("a",{parentName:"li",href:"https://huggingface.co/docs/transformers/main_classes/optimizer_schedules#transformers.AdamW"},"Implementation")),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udcc4 ",(0,r.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1711.05101"},"Paper"))),(0,r.kt)("p",null,"To use it, put the following yaml lines in your own profile or config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  optim_conf:\n    _target_: classy.optim.factories.AdamWWithWarmupFactory\n    lr: 3e-5\n    warmup_steps: 5000\n    total_steps: ${training.pl_trainer.max_steps}\n    weight_decay: 0.01\n    no_decay_params:\n      - bias\n      - LayerNorm.weight\n")),(0,r.kt)("h3",{id:"adafactor"},"Adafactor"),(0,r.kt)("p",null,"An Optimizer that you should use in order to ",(0,r.kt)("strong",{parentName:"p"},"reduce the VRAM memory usage"),". Performances are almost on par with AdamW"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udd28 ",(0,r.kt)("a",{parentName:"li",href:"https://huggingface.co/transformers/main_classes/optimizer_schedules.html#adafactor-pytorch"},"Implementation")),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udcc4 ",(0,r.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1804.04235"},"Paper"))),(0,r.kt)("p",null,"To use it, put the following yaml lines in your own profile or config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  optim_conf:\n    _target_: classy.optim.factories.AdafactorWithWarmupFactory\n    lr: 2e-5\n    warmup_steps: 5000\n    total_steps: ${training.pl_trainer.max_steps}\n    weight_decay: 0.01\n    no_decay_params:\n      - bias\n      - LayerNorm.weight\n")),(0,r.kt)("h3",{id:"radam"},"RAdam"),(0,r.kt)("p",null,"A more recent Optimizer that stabilizes training and let's you ",(0,r.kt)("strong",{parentName:"p"},"skip the warmup phase"),". You can replace AdamW with RAdam in almost every scenario."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udd28 ",(0,r.kt)("a",{parentName:"li",href:"https://huggingface.co/transformers/main_classes/optimizer_schedules.html#adafactor-pytorch"},"Implementation")),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udcc4 ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/LiyuanLucasLiu/RAdam"},"Paper"))),(0,r.kt)("p",null,"To use it, put the following yaml lines in your own profile or config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  optim_conf:\n    _target_: classy.optim.factories.RAdamFactory\n    lr: 3e-5\n    weight_decay: 0.01\n    no_decay_params:\n      - bias\n      - LayerNorm.weight\n")),(0,r.kt)("h2",{id:"custom-optimizers"},"Custom Optimizers"),(0,r.kt)("p",null,"If you want to implement your own Optimizer and Learning Rate Scheduler you can simply create a class that inherits from ",(0,r.kt)("inlineCode",{parentName:"p"},"classy.optim.TorchFactory")," and implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"__call__")," method returning either the Optimizer or a dictionary containing the Optimizer and the Scheduler in the following way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class AdagradWithWarmup(TorchFactory):\n    """\n    Factory for Adagrad optimizer with warmup learning rate scheduler\n    reference paper for Adagrad: https://jmlr.org/papers/v12/duchi11a.html\n    """\n\n    def __init__(\n        self,\n        lr: float,\n        warmup_steps: int,\n        total_steps: int,\n        weight_decay: float,\n        no_decay_params: Optional[List[str]],\n    ):\n        super().__init__(weight_decay, no_decay_params)\n        self.lr = lr\n        self.warmup_steps = warmup_steps\n        self.total_steps = total_steps\n\n    def __call__(self, module: torch.nn.Module):\n        optimizer = Adagrad(\n            module.parameters(), lr=self.lr, weight_decay=self.weight_decay\n        )\n        scheduler = transformers.get_linear_schedule_with_warmup(\n            optimizer, self.warmup_steps, self.total_steps\n        )\n        return {\n            "optimizer": optimizer,\n            "lr_scheduler": {\n                "scheduler": scheduler,\n                "interval": "step",\n                "frequency": 1,\n            },\n        }\n')),(0,r.kt)("p",null,"This ",(0,r.kt)("inlineCode",{parentName:"p"},"__call__")," method should return any of the possible return types from the ",(0,r.kt)("a",{parentName:"p",href:"https://pytorch-lightning.readthedocs.io/en/latest/api/pytorch_lightning.core.lightning.html#pytorch_lightning.core.lightning.LightningModule.configure_optimizers"},(0,r.kt)("inlineCode",{parentName:"a"},"configure_optimizers"))," method of pytorch_lightning. But if you don't have to do fancy stuff this piece of code is everything you'll need :)."),(0,r.kt)("p",null,"Then, you can use your own Optimizer in your experiments by specifing it in your profile or config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  optim_conf:\n    _target_: my_repo.optimization.AdagradWithWarmup\n    lr: 3e-5\n    weight_decay: 0.01\n    no_decay_params:\n      - bias\n      - LayerNorm.weight\n")))}c.isMDXComponent=!0}}]);